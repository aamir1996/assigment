{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter marks of the Computer subject:23\n",
      "Enter marks of the English subject: 23\n",
      "Enter marks of the Maths subject: 12\n",
      "Enter marks of the Urdu subject: 45\n",
      "Enter marks of the Sindhi subject: 53\n",
      "Total Marks = 156\n",
      "Total Avg = 31.2\n",
      "Grade: B\n"
     ]
    }
   ],
   "source": [
    "# Question 1 Answer\n",
    "subject1=int(input(\"Enter marks of the Computer subject:\" ))\n",
    "subject2=int(input(\"Enter marks of the English subject: \"))\n",
    "subject3=int(input(\"Enter marks of the Maths subject: \"))\n",
    "subject4=int(input(\"Enter marks of the Urdu subject: \"))\n",
    "subject5=int(input(\"Enter marks of the Sindhi subject: \"))\n",
    "\n",
    "totalmarks = subject1+subject2+subject3+subject4+subject5\n",
    "print(\"Total Marks =\",totalmarks) \n",
    "avg=(totalmarks/500)*100\n",
    "print(\"Total Avg =\",avg) \n",
    "if(avg>=90):\n",
    "    print(\"Grade: A\")\n",
    "elif(avg>=80 or avg<90):\n",
    "    print(\"Grade: B\")\n",
    "elif(avg>=70 or avg<80):\n",
    "    print(\"Grade: C\")\n",
    "elif(avg>=60 or avg<70):\n",
    "    print(\"Grade: D\")\n",
    "else:\n",
    "    print(\"Grade: F\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type Even OR ODD Number:  3\n",
      "3 is Odd\n"
     ]
    }
   ],
   "source": [
    "#Answer 2\n",
    "userinput = int(input(\"Type Even OR ODD Number:  \"))\n",
    "\n",
    "if (userinput % 2) == 0:\n",
    "   print(\"{0} is Even\".format(userinput))\n",
    "else:\n",
    "   print(\"{0} is Odd\".format(userinput))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "String Length Is :  4\n"
     ]
    }
   ],
   "source": [
    "#Answer 3\n",
    "listarry =[\"apple\",\"Bannana\",\"Cake\",\"Pastary\"]\n",
    "print(\"String Length Is : \", len(listarry)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Largest Number in List :  54899\n"
     ]
    }
   ],
   "source": [
    "# Question : Write a Python program to get the largest number from a numeric list.\n",
    "#Answer 5\n",
    "numbers = [15788,20578,3355,4567,5099,54899,1000]\n",
    "totalsum = max(numbers)\n",
    "print(\"Largest Number in List : \", totalsum)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Number of number in List :  12 \n",
      " -----------------------------\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "# Question : write a program that prints out all the elements of the list that are less than 5.\n",
    "#Answer 6\n",
    "\n",
    "a = [33, 1, 2, 3,4, 5, 8, 13, 21, 34, 55, 89]\n",
    "listlength = int(len(a))\n",
    "print(\"Total Number of number in List : \",listlength,  \"\\n -----------------------------\")\n",
    "\n",
    "for i in range(listlength):\n",
    "    if a[i]<=5:\n",
    "        print(a[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
